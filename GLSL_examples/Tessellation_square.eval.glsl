#version 400 core
//The main purpose of tessellation evaluation shader is:
//configure the primitive generator, which is done using a layout directive
//Specifying the face winding for generated primitives
//(the order the vertices are issued determines the facedness of the primitive)
layout (quads, equal_spacing, ccw) in;
//The TES is executed on all generated domain locations.
//The bound tessellation evaluation shader is
//executed one for each tessellation coordinate that the primitive generator
//Tessellation Shaders emits, and is responsible for determining the position
//of the vertex derived from the tessellation coordinate.
uniform mat4 PJ;
uniform mat4 MV;
#define M_PI        3.14159265358979323846
//----------------------------------------------------------------------------
float Hanning( vec2 p )
{
    p -= 0.5; // map unit square to [-.5, .5]
    float r = length( p );
    r = cos( M_PI * r / 2.0 );
    r *= r;
    return r;
}
void main()
{
    //gl_TessCoord is used to access the Tessellation coordinates that are
    //generated by tessellation control shader
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
   
    //use Tessellation coordinates to calculate position for new vertex that
    //is generated by tessellation control shader
    #define p(i)  gl_in[i].gl_Position
    vec4 pos = v*(u*p(0) + (1-u)*p(1)) + (1-v)*(u*p(3) + (1-u)*p(2));
    pos.z = Hanning( gl_TessCoord.xy );
   
    gl_Position = PJ * MV * pos;
}